import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  console.log('üé≠ Recibida solicitud de anonimizaci√≥n de audio');
  
  try {
    const requestData = await request.json();
    const { audioUrl } = requestData;
    
    if (!audioUrl) {
      console.error('‚ùå No se proporcion√≥ URL de audio');
      return NextResponse.json(
        { error: 'No audio URL provided' },
        { status: 400 }
      );
    }
    
    console.log(`üîÑ Anonimizando audio: ${audioUrl}`);
    
    const anonymizationEndpoint = 'https://scriba-bmenmapcaa-uc.a.run.app/controller';
    console.log(`üîó Enviando solicitud a: ${anonymizationEndpoint}`);
    
    const anonymizeResponse = await fetch(anonymizationEndpoint, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        "step": "anonymize",
        "audio": audioUrl
      }),
    });
    
    if (!anonymizeResponse.ok) {
      const errorText = await anonymizeResponse.text().catch(() => 'No error details available');
      console.error(`‚ùå Error en anonimizaci√≥n: ${anonymizeResponse.status} - ${errorText}`);
      throw new Error(`Error en el proceso de anonimizaci√≥n: ${anonymizeResponse.status} ${anonymizeResponse.statusText}`);
    }
    
    const anonymizeData = await anonymizeResponse.json();
    console.log('‚úÖ Respuesta de anonimizaci√≥n recibida:', anonymizeData);
    
    if (!anonymizeData.output || !anonymizeData.output.audio) {
      console.error('‚ùå Formato de respuesta inv√°lido:', anonymizeData);
      throw new Error('Formato de respuesta inv√°lido del servicio de anonimizaci√≥n');
    }
    
    const bucketName = process.env.GCS_BUCKET_NAME;
    const anonymizedAudioUrl = `https://storage.googleapis.com/${bucketName}/${anonymizeData.output.audio}`;
    console.log(`üéµ URL de audio anonimizado: ${anonymizedAudioUrl}`);
    
    return NextResponse.json({
      status: 'success',
      anonymizedAudioUrl
    });
    
  } catch (error) {
    console.error('‚ùå Error al anonimizar audio:', error);
    return NextResponse.json(
      { error: 'Failed to anonymize audio', details: (error as Error).message },
      { status: 500 }
    );
  }
} 